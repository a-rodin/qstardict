#!/bin/sh

# This is a script that creates distribution from qmake-based Subversion project
# Copyright (C) 2007 Alexander Rodin <rodin.alexander@gmail.com>

if test -t 1; then
    RED_FG='\E[31;01m'
    GREEN_FG='\E[32;01m'
    BLUE_FG='\E[34;01m'
    NO_COLOR='\E[0m'
    COLS="$(set -- `stty size 2>/dev/null`; echo "$2")"
else
    COLS=80
fi
STR_WIDTH=$(($COLS-9))

function print_ok
{
    echo -e $BLUE_FG"["$GREEN_FG" ok "$BLUE_FG"]"$NO_COLOR
}

function print_fail
{
    echo -e $BLUE_FG"["$RED_FG" fail "$BLUE_FG"]"$NO_COLOR
}

function project_get_variable()
{
    if [ $# < 3 ]; then
        exit
    fi
    cat $1 | grep -e $2' =' | sed 's/'$2'.*=\s*//'
}

while [ "$#" != "0" ]; do
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Using: $0 [svn directory] [options]"
        echo "This is a script that creates distribution from qmake-based Subversion project"
        echo "Options:"
        echo "  --output-directory, -o     set output directory for tarball"
        echo "  --project-name, -n         force set project name"
        echo "  --project-version, -v      force set project version"
        echo "  --no-translations, -t      dont update translations"
        echo "  --help, -h                 show this help"
        exit 0
    elif [ "$1" = "--output-dir" ] || [ "$1" = "-o" ]; then
        shift
        OUTPUT_DIR="$1"
    elif [ "$1" = "--project-name" ] || [ "$1" = "-p" ]; then
        shift
        PROJECT_NAME="$1"
    elif [ "$1" = "--project-version" ] || [ "$1" = "-v" ]; then
        shift
        PROJECT_VERSION="$1"
    elif [ "$1" = "--no-translations" ] || [ "$1" = "-t" ]; then
        NO_TRANSLATIONS="1"
    else
        if [ "$WORK_DIR" = "" ]; then
            WORK_DIR="$1"
        else
            echo "Unknown parameter"
            exit 1
        fi
    fi
    shift
done

if [ "$WORK_DIR" != "" ]; then
    printf "%-"$STR_WIDTH"s" "Changing a current directory"
    if ! test -d $WORK_DIR; then
        print_fail
        exit 1
    fi
    OLD_DIR=$PWD
    function _exit()
    {
        cd $OLD_DIR
    }
    cd $WORK_DIR
    print_ok
fi

printf "%-"$STR_WIDTH"s" "Getting a files list"
FILES=`svn ls -R`
if [ "$FILES" != "" ]; then
    print_ok
else
    print_fail
    exit 1
fi

printf "%-"$STR_WIDTH"s" "Searching the project file"
for i in $FILES; do
    if test -f $i && [ "`echo $i | grep -o '\.pro$'`" = ".pro" ]; then
        PROJECT_FILE=$i;
        break;
    fi
done

if [ "$PROJECT_FILE" != "" ]; then
    print_ok
else
    print_fail
    exit 1
fi

if [ "$NO_TRANSLATIONS" != "1" ]; then
    printf "%-"$STR_WIDTH"s" "Updating translations"
    lrelease $PROJECT_FILE >/dev/null 2>/dev/null && print_ok || print_fail
fi

printf "%-"$STR_WIDTH"s" "Creating dist"

if [ "$PROJECT_NAME" = "" ]; then
    PROJECT_NAME=`cat $PROJECT_FILE | grep -e 'TARGET =' | sed 's/TARGET.*=\s*//'`
    if [ "$PROJECT_NAME" = "" ]; then
        PROJECT_NAME=`echo $PROJECT_FILE | sed 's/\.pro$//'`
    fi
fi

if [ "$PROJECT_VERSION" = "" ]; then
    PROJECT_VERSION=`cat $PROJECT_FILE | grep -e 'VERSION =' | sed 's/VERSION.*=\s*//'`
    if [ "$PROJECT_VERSION" = "" ]; then
        PROJECT_VERSION=svn
    fi
fi

rm -rf $PROJECT_NAME-$PROJECT_VERSION
mkdir $PROJECT_NAME-$PROJECT_VERSION
for i in $FILES; do
    if test -d $i; then
        mkdir -p $PROJECT_NAME-$PROJECT_VERSION/$i
    elif test -f $i && ! test "$i" -ef "$0" ; then
        cp $i $PROJECT_NAME-$PROJECT_VERSION/$i
    fi
done

rm -rf $PROJECT_NAME-$PROJECT_VERSION.tar.bz2
tar cjf $PROJECT_NAME-$PROJECT_VERSION.tar.bz2 $PROJECT_NAME-$PROJECT_VERSION

if test -f $PROJECT_NAME-$PROJECT_VERSION.tar.bz2; then
    print_ok
else
    print_fail
fi

if [ "$OUTPUT_DIR" != "" ]; then
    printf "%-"$STR_WIDTH"s" "Moving to output directory"
    mkdir -p $OUTPUT_DIR
    mv $PROJECT_NAME-$PROJECT_VERSION.tar.bz2 $OUTPUT_DIR/$PROJECT_NAME-$PROJECT_VERSION.tar.bz2 && print_ok || print_fail
fi

printf "%-"$STR_WIDTH"s" "Cleaning temponary directories"
rm -rf $PROJECT_NAME-$PROJECT_VERSION
print_ok

